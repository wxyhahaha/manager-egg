'use strict';

const Controller = require('egg').Controller;
const jwt = require('jsonwebtoken');
const captchapng = require('captchapng')
class LoginController extends Controller {
  async login() {
    const { ctx, app, service } = this;
    let username = ctx.request.body.username;
    let password = ctx.request.body.password;
    let imgcode = ctx.request.body.imgcode;
    let session_imgcode = ctx.session.captcha
    ctx.session.captcha = '';
    if(!imgcode || imgcode !==session_imgcode){
      return ctx.body = { code:300,msg:'imgcode fail' }
    }
    let user = await service.admin.login.verifyUser(username,password)
    if(user.isPass){
      let signData = jwt.sign({
        exp: Math.floor(Date.now() / 1000) + (60*60) ,
        data: {username:username}
      }, app.config.privateKey);
      await service.admin.login.updateToken(username,signData)
      ctx.body = { code:0, msg:'login success', data:{ user:user.user.username, newtoken:signData }}
    }
    else{ 
      ctx.body = { code:404,msg:'login fail' } 
    }
  }
  async captcha(){
    let { ctx } = this
    let captcha = parseInt(Math.random()*9000 + 1000)
    let codePng = new captchapng(80, 50, captcha)
    codePng.color(0,0,0,0)
    codePng.color(80, 80, 80, 60)
    let img = codePng.getBase64();
    let imgbase64 = new Buffer(img, 'base64')
      // 把验证码保存到session中,用于用户提交留言时校验
      ctx.session.captcha = captcha.toString();
      ctx.cookies.set('key', ctx.session.captcha);
      ctx.type = 'image/png';
      ctx.body = imgbase64
      
  }
}
 
module.exports = LoginController;
