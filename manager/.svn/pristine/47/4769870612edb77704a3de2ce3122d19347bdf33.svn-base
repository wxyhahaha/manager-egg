<template>
    <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" :label-width="80">
        <Row>
            <Col span='5'>
                <FormItem label="分类名称" prop="categoryId">
                        <Select v-model="formValidate.categoryId" >
                                <Option v-for="item in categoryList" :value="item.categoryId" :key="item.categoryId">{{ item.catName }}</Option>
                        </Select>  
                </FormItem>
            </Col>
            <Col span='10' offset="2">
                <FormItem label="商品名称" prop="goodsName" >
                    <Input v-model="formValidate.goodsName" placeholder="输入商品名称" ></Input>
                </FormItem>
            </Col>
      
        </Row>
        <FormItem label="链接生成" >
            <Upload action="http://localhost:7001/manager/upload" :on-success="success">
                <Button icon="ios-cloud-upload-outline" style="margin-right:40px">上传文件</Button>{{imgUrl}}
            </Upload>
        </FormItem>

        <FormItem label="商品封面" prop="goodsImg" >          
            <Input v-model="formValidate.goodsImg" placeholder="请输入链接" @on-focus="imgInputFocus"></Input>
        </FormItem>
        <FormItem label="商品图片   "
                >
            <Row v-for="(item, index) in formDynamic.items"
                v-if="item.status"
                :key="index"
                 style="margin-bottom:10px">
                <Col span="18">
                    <Input type="text" v-model="item.value" placeholder="输入链接"></Input>
                </Col>
                <Col span="4" offset="1">
                    <Button type="error" @click="handleRemove(index)">删除</Button>
                </Col>
            </Row>          
        </FormItem>
        <FormItem>
            <Row>
                <Col span="12">
                    <Button type="dashed" long @click="handleAdd" icon="md-add">Add item</Button>
                </Col>
            </Row>
        </FormItem>      
        <Row >
            <Col span="5">
                <FormItem label="最低价格" prop="minPrice" >
                    <Input v-model="formValidate.minPrice" placeholder="请输入最低价格"><span slot="append">元</span></Input>
                </FormItem>  
            </Col>
            <Col span="5" >
            <FormItem label="原价" prop="orignPrice" >
                <Input v-model="formValidate.orignPrice" placeholder="请输入原价"><span slot="append">元</span></Input>
            </FormItem> 
            </Col>
            <Col span="5">
                <FormItem label="库存量" prop="stores" >
                    <Input v-model="formValidate.stores" placeholder="请输入库存量"></Input>
                </FormItem>     
            </Col>
        </Row>  
        <Row>
            <Col span="5">
                <FormItem label="是否上架" prop="isSale" >
                    <Select v-model="formValidate.isSale" style="width:100px">
                            <Option v-for="item in trueOrfalse" :value="item.value" :key="item.value">{{ item.key }}</Option>
                    </Select>  
                </FormItem>
            </Col>
            <Col span="5">
                <FormItem label="是否精品" prop="isBest" >
                    <Select v-model="formValidate.isBest" style="width:100px">
                            <Option v-for="item in trueOrfalse" :value="item.value" :key="item.value">{{ item.key }}</Option>
                    </Select>  
                </FormItem> 
            </Col>
            <Col span="5">
                <FormItem label="是否新品" prop="isNew" >
                    <Select v-model="formValidate.isNew" style="width:100px">
                            <Option v-for="item in trueOrfalse" :value="item.value" :key="item.value">{{ item.key }}</Option>
                    </Select>  
                </FormItem>  
            </Col>
            <Col span="5">
                <FormItem label="是否推荐" prop="isRecom" >
                    <Select v-model="formValidate.isRecom" style="width:100px">
                            <Option v-for="item in trueOrfalse" :value="item.value" :key="item.value">{{ item.key }}</Option>
                    </Select>  
                </FormItem> 
            </Col>
        </Row>




        <FormItem label="商品描述" prop="goodsDesc">
            <Input v-model="formValidate.goodsDesc" type="textarea" :autosize="{minRows: 2,maxRows: 5}" placeholder="商品描述..."></Input>
        </FormItem>       
        <FormItem>
            <Button type="primary" @click="upDateData('formValidate')"  :loading="loading" v-if="query.id">修改</Button>
            <Button type="primary" @click="addData('formValidate')"  :loading="loading" v-else>提交</Button>
            <Button @click="handleReset('formValidate')" style="margin-left: 8px">重置</Button>

        </FormItem>

    </Form>
</template>
<script>
import { insertData, fitchDataList, updateDataList } from '@/api/apiGoods'
import {  fitchCatDataList } from '@/api/apiCategory'
    export default {
        data () {
            return {
                index: 0,
                formDynamic: {
                    items: [
                        {
                            value: '',
                            index: 0,
                            status: 1
                        }
                    ]
                },
                pics:[],//更新进来的数组
                query:{id:undefined},
                formValidate: {
                    categoryId:undefined,
                    goodsName:undefined,
                    minPrice: undefined,
                    orignPrice: undefined,
                    stores:undefined,
                    isSale:undefined,
                    isBest:undefined,
                    isNew:undefined,
                    isRecom:undefined,
                    goodsDesc:undefined,
                    goodsImg:undefined
                },
                loading:false,
                ruleValidate: {
                    categoryId: [
                        { required: true, message: '分类名称不能为空', trigger: 'blur' }
                    ],
                    goodsName: [
                        { required: true, message: '分类名称不能为空', trigger: 'blur' }
                    ],
                    
                },
                baseUrl:'http://localhost:7001/public/img/',
                imgUrl:'',
                categoryList:[],
                trueOrfalse:[
                    {
                        key:'是',
                        value:1
                    },
                    {
                        key:'否',
                        value:0
                    }
                ],

            }
        },
        mounted(){
            let query = this.$router.currentRoute.query
            this.query = query;
            console.log(query)
            console.log('执行mounted')
            this.fetchData();
            this.ftchCategory()
        },
        methods: {

            handleSubmit (name, fn) {
                
                this.$refs[name].validate((valid) => {
                    if (valid) {
                        this.loading = true
                        fn()                       
                    } else {
                        this.$Notice.error({title:'失败!'});
                    }
                })
            },
            handleReset (name) {
                this.$refs[name].resetFields();
            },
            //添加数据
            addData(name){
                Object.assign(this.formValidate)  
                let goodsPics =this.checkAndAssign()
                Object.assign(this.formValidate,{goodsPics})            
                this.handleSubmit(name, ()=>{
                    console.log('res')
                    insertData(this.formValidate).then((res)=>{
                        console.log(res)
                        if(res.data.code ==0){
                            this.loading = false
                            setTimeout(() => {
                                this.back()
                            }, 800);
                            
                            this.$Notice.success({title:'添加成功!'});
                        }
                        
                    })
                })

            },
            //更新数据
            upDateData(name){
                let obj = this.query
                let goodsPics =this.checkAndAssign()
                Object.assign(obj,this.formValidate,{goodsPics})
                this.handleSubmit(name, ()=>{
                    updateDataList(obj).then((res)=>{
                        if(res.data.code ==0){
                            console.log(res)
                            this.loading = false
                            setTimeout(() => {
                                this.back()
                            }, 800);
                            this.$Notice.success({title:'更新成功!'});
                        }
                        
                    })
                })

            },
            //获取数据
            fetchData(){
                
                let{ id }= this.query
                console.log('idididi',id)
                let flag = true
                id ? flag : flag = false
                if(!flag) return
                fitchDataList({ id,page:1,pageSize:10 }).then((res)=>{
                    if(res.data.code == 0){
                        console.log(res)
                        let { 
                            categoryId, 
                            goodsName,
                            goodsPics, 
                            minPrice, 
                            orignPrice,
                            stores, 
                            isSale, 
                            isNew, 
                            isRecom,
                            goodsDesc,
                            goodsImg
                        } = res.data.result.data[0]
                    this.formValidate = {categoryId,  goodsName,  minPrice, orignPrice, stores, isSale, isNew, isRecom, goodsDesc,goodsImg}
                    this.pics = JSON.parse(goodsPics)
                    this.formatPics()
                    }
                })

            },
            back(){
                this.$router.back(-1)
            },
            //获取分类
            ftchCategory(){
                fitchCatDataList({page:1,pageSize:10}).then((res)=>{
                    if(res.data.code == 0){
                        console.log(res.data.result.data)
                        let category = res.data.result.data
                        let categoryList =[]
                        for(let k of category){
                            let { categoryId, catName } = k 
                            categoryList.push({categoryId, catName })
                        }
                        this.categoryList = categoryList
                    }
                }).catch((res)=>{ })
            },
            //链接生成成功
            success(response, file, fileList){
                console.log(response.data)
                this.imgUrl = this.baseUrl+response.data
            },
            imgInputFocus(){
                this.$Notice.info({
                    title:'提示',
                    desc:'点击上传文件,生成链接,用于输入图片链接哦'
                })
            },
            //商品图片
            handleReset (name) {
                this.$refs[name].resetFields();
            },
            handleAdd () {
                this.index++
                this.formDynamic.items.push({
                    value: '',
                    index: this.index,
                    status: 1
                });
            },
            handleRemove (index) {
                this.formDynamic.items[index].status = 0;
            },
            //商品图片链接数组字符串
            checkAndAssign(){
                let newImgArr = []
                this.formDynamic.items.forEach(el=>{
                    if(el.status == 1){
                        let imgUrl = el.value
                        newImgArr.push(imgUrl)
                    }

                })
                return JSON.stringify(newImgArr)
            },
            //商品图片链接数组
            formatPics(){
                console.log(this.pics)
                this.formDynamic.items=[]
                this.index = 0
                for(let k in this.pics){
                    this.formDynamic.items.push({value:this.pics[k],index:this.index++,status:1})
                }
            },
            // addImg(){
            //     this.$axios.post('http://localhost:7001/manager/image/insert').then((res)=>{
            //         if(res.data.code == 0){
            //             console.log(res)
            //         }
            //     }).catch((res)=>{ })
            // }
                        
        }
    }
</script>
<style>

</style>
