<template>
    <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" :label-width="80">
        <FormItem label="上级分类" prop="pid">
            <Input v-model="formValidate.pid" placeholder="请输入分类名称" disabled></Input>
        </FormItem>
        <FormItem label="分类名称" prop="catName">
            <Input v-model="formValidate.catName" placeholder="请输入分类名称"></Input>
        </FormItem>
        <FormItem label="封面" prop="catImg">
            <Input v-model="formValidate.catImg" placeholder="请输入链接"></Input>
        </FormItem>
       
        <FormItem>
            <Button type="primary" @click="upDateData('formValidate')"  :loading="loading" v-if="query.id">修改</Button>
            <Button type="primary" @click="addData('formValidate')"  :loading="loading" v-else>提交</Button>
            <Button @click="handleReset('formValidate')" style="margin-left: 8px">重置</Button>
        </FormItem>
    </Form>
</template>
<script>
import { updateDataList, insertData, fitchCatDataList } from '@/api/apiCategory'
    export default {
        data () {
            return {
                query:{id:undefined},
                formValidate: {
                    catName: undefined,
                    catImg: undefined,
                    pid:undefined
                },
                loading:false,
                ruleValidate: {
                    catName: [
                        { required: true, message: '分类名称不能为空', trigger: 'blur' }
                    ],
                    
                }
            }
        },
        mounted(){
            let query = this.$router.currentRoute.query
            this.query = query;
            console.log(query)
            this.fetchData()
        },
        methods: {

            handleSubmit (name, fn) {
                
                this.$refs[name].validate((valid) => {
                    if (valid) {
                        this.loading = true
                        fn()                       
                    } else {
                        this.$Notice.error({title:'失败!'});
                    }
                })
            },
            handleReset (name) {
                this.$refs[name].resetFields();
            },
            addData(name){
                this.handleSubmit(name, ()=>{
                insertData(this.formValidate).then((res)=>{
                        console.log(res)
                        if(res.data.code ==0){
                            this.loading = false
                            setTimeout(() => {
                                this.back()
                            }, 800);
                            
                            this.$Notice.success({title:'添加成功!'});
                        }
                        
                    })

                })

            },
            upDateData(name){
                let obj = this.query
                Object.assign(obj,this.formValidate)
                this.handleSubmit(name, ()=>{
                    updateDataList(obj).then((res)=>{
                        if(res.data.code ==0){
                            console.log(res)
                            this.loading = false
                            setTimeout(() => {
                                this.back()
                            }, 800);
                            this.$Notice.success({title:'更新成功!'});
                        }
                        
                    })
                })

            },
            fetchData(){
                let{ id }= this.query
                let flag = true
                id ? flag : flag = false
                if(!flag) return
                fitchCatDataList({ id,page:1,pageSize:10 }).then((res)=>{
                    if(res.data.code == 0){
                        console.log(res)
                        let { catName, catImg, pid } = res.data.result.data[0]
                        this.formValidate.catName = catName;
                        this.formValidate.catImg = catImg;
                        this.formValidate.pid = pid;
                    }
                })

            },
            back(){
                this.$router.back(-1)
            },
        }
    }
</script>
